## Lab

### RISC-V assembly ([easy](https://pdos.csail.mit.edu/6.828/2022/labs/guidance.html))

了解一点RISC-V汇编是很重要的，您在6.1910(6.004)中已经接触过。在xv6仓库中有一个文件`user/call.c`。`make fs.img`对它进行编译，并在`user/call.asm`中生成可读的程序汇编版本。

请阅读`call.asm`中的代码中的函数`g`、`f`和`main`。RISC-V的使用手册参见参考页面。下面是一些需要回答的问题(将答案存储在文件answers-traps.txt中):

> 哪些寄存器包含函数的参数? 例如，在main调用printf时，哪个寄存器保存了13 ?
>
> **solution**
>
> 首先s0寄存器又叫fp寄存器, 指向前一个栈帧的地址.  
>
> 可以看到, 在f函数的开始位置, 是一个长达三条指令的函数头.
>
> 先为f的栈帧分配16字节大小, 此时fp存储到是上一个栈帧的位置. 所以将s0存储在8(sp)位置.
>
> 由于后续可能还需要调用其他函数, 为了维护fp的性质, 将fp修改为当前栈帧地址(对于子函数来说，父函数的栈帧就是上一个栈帧). 可以发现这里的栈帧没存返回地址, 也没关系, 因为这是leaf函数(在汇编中是如此, 尽管C代码不是), ra寄存器不会被修改了.
>
> ```asm
> addi	sp,sp,-16
> sd	s0,8(sp)
> addi	s0,sp,16
> ```
>
> 接下来的指令是函数体. 容易看出函数参数在a0寄存器中
>
> ```cpp
> addiw	a0,a0,3  
> ```
>
> 再接下来几条指令, 是函数尾
>
> ```asm
> ld	s0,8(sp)  // 现在需要返回, 复原fp
> addi	sp,sp,16 // 复原sp
> ret
> ```
>
> 这就是f的全过程. 
>
> 然后main函数中， a2寄存器保存了13.



> main的汇编代码中对函数f的调用在哪里?呼叫g在哪里?(提示:编译器可以内联函数。)
>
> **solution**
>
> 没有调用。`g`被内联到`f`中，然后`f`又被内联到main中。由汇编代码中main函数中的`li a1,12`可以看出，直接将最后的结果12传递到了`a1`。



> printf函数位于什么地址?
>
> **solution**
>
> 根据这两句, 首先设置ra为当前pc到值0x30
>
> 然后加上1562(0x61a), 所以实际的跳转地址是0x64a
>
> ```asm
>   30:	00000097          	auipc	ra,0x0
>   34:	61a080e7          	jalr	1562(ra) # 64a <printf>
> ```





> 在main中的jalr到printf之后，寄存器ra中的值是什么?
>
> **solution**
>
> jalr将pc设置为printf的首地址, 将ra设置为当前指令的下一条指令地址. 就是0x38.



> 运行下面的代码。
>
> ```cpp
> 	unsigned int i = 0x00646c72;
> 	printf("H%x Wo%s", 57616, &i);
> ```
>
> 输出是什么? 下面是一个将字节映射到字符的[ASCII表](https://www.asciitable.com/)。
> 输出结果依赖于RISC-V是小端序的。如果RISC-V是大端序的，为了得到相同的输出，应该把i设置为什么呢? 是否需要将57616更改为其他值?
>
> 这是对[小端和大端的描述](http://www.webopedia.com/TERM/b/big_endian.html)还有一个更[古怪的描述](https://www.rfc-editor.org/ien/ien137.txt)。
>
> **solution**
>
> 输出是`He110 World`. 
>
> 首先57616的十六进制是0xe110.
>
> RISC-V是小端序(小/低位在前), 在内存的存储形式为0x726c6400, 也就是rld， 末尾一个'\0'.
>
> 如果RISC-V是大端序, 只需将i修改为i=0x726c6400.



> 在下面的代码中，` y= `后面会打印什么?(注意:答案不是一个特定的值。)为什么会这样?
>
> ```cpp
> printf("x=%d y=%d", 3);
> ```
>
> **solution**
>
> printf的两个参数分别放在a1和a2中. 这里会直接输出a2里的值.